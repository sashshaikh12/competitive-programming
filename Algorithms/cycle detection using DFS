const ll N = 1e5 + 10;
    vector<ll> g[N];
    bool vis[N];

    bool dfs(ll vertex, ll par) // O(V + E), if E is of order V^2 then can blow to O(V^2)
    {
        // take action on vertex after entering the vertex 
        vis[vertex] = true;
        bool isloop = false;
        for(auto child: g[vertex])
        {
            if(vis[child] && child == par) continue;
            if(vis[child]) return true;
            // take action on child before entering the child node

            isloop |= dfs(child, vertex);

            // take action on child after exiting the child node 
        }

        // take action on vertex before exiting the vertex
        return isloop;
    }

void solve()
    {
        ll v, e;
        cin>>v>>e;
        for (int i = 0; i < e; ++i)
        {
            ll x, y;
            cin>>x>>y;
            g[x].pb(y);
            g[y].pb(x);
        }
        bool isloop = false;
        for (int i = 1; i <= v; ++i)
        {
            if(vis[i]) continue;
            if(dfs(i,0)) // assume nodes are 1 indexed
            {
                isloop = true;
                break;
            }
        }
        cout<<isloop<<endl;
    } 
