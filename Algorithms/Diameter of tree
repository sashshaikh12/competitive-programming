const ll N = 1e5 + 10;
    vector<ll> g[N];
    vector<ll> depth(N);

    void dfs(ll vertex, ll par = -1) // O(V + E), if E is of order V^2 then can blow to O(V^2)
    {
        // take action on vertex after entering the vertex 
        for(auto child: g[vertex])
        {
            if(child == par) continue;
            // take action on child before entering the child node
            depth[child] = depth[vertex] + 1;
            dfs(child , vertex);

            // take action on child after exiting the child node 
        }

        // take action on vertex before exiting the vertex
    }

void solve()
    {
        ll n;
        cin>>n;
        for (int i = 1; i <= n - 1; ++i)
        {
            ll x,y;
            cin>>x>>y;
            g[x].pb(y);
            g[y].pb(x);
        }
        dfs(1);

        ll mx_depth = -1, mx_node = -1;
        for (int i = 1; i <= n; ++i)
        {
            if(mx_depth < depth[i])
            {
                mx_depth = depth[i];
                mx_node = i;
            }
            depth[i] = 0;
        }

        dfs(mx_node);

        cout<<*max_element(all(depth));
    } 
