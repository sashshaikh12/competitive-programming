// O(N)

const ll N = 1e5 + 10;
    vector<ll> g[N];
    vector<ll> par[N];

    void dfs(ll vertex, ll p = -1) // O(V + E), if E is of order V^2 then can blow to O(V^2)
    {
        // take action on vertex after entering the vertex 
        par[vertex] = p;
        for(auto child: g[vertex])
        {
            if(child == p) continue;
            // take action on child before entering the child node

            dfs(child , vertex);

            // take action on child after exiting the child node 
        }

        // take action on vertex before exiting the vertex
    }

vector<ll> path(ll v)
{
    vector<ll> ans;
    while(v != -1)
    {
        ans.pb(v);
        v = par[v];
    }
    reverse(all(ans));
    return ans;
}

void solve()
    {
        ll n;
        cin>>n;
        for (int i = 0; i < n - 1; ++i)
        {
            ll x, y;
            cin>>x>>y;
            g[x].pb(y);
            g[y].pb(x);
        }

        dfs(1);

        ll x , y;
        cin>>x>>y;
        vector<ll> path_x = path(x);
        vector<ll> path_y = path(y);
        ll mn_len = min(sz(path_x) , sz(path_y));
        ll lca = -1;
        for (int i = 0; i < mn_len; ++i)
        {
            if(path_x[i] == path_y[i]) lca = path_x[i];
            else break;
        }
        cout<<lca;
    } 
