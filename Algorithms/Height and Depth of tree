const ll N = 1e5 + 10;
    vector<ll> g[N];
    vector<ll> depth(N), height(N);

    void dfs(ll vertex, ll par = 0) // O(V + E), if E is of order V^2 then can blow to O(V^2), par = 0 assuming nodes are 1-indexed
    {
        // take action on vertex after entering the vertex 
        for(auto child: g[vertex])
        {
            if(child == par) continue;
            depth[child] = depth[vertex] + 1;
            // take action on child before entering the child node

            dfs(child , vertex);

            height[vertex] = max(height[vertex] , height[child] + 1);

            // take action on child after exiting the child node 
        }

        // take action on vertex before exiting the vertex
    }
